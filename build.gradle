plugins {
    id 'java'
    id 'application'
}

group 'malte0811'
version '1.2.0'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation group: 'junit', name: 'junit', version: '4.12'
    implementation group: 'com.google.guava', name: 'guava', version: '31.0.1-jre'
    implementation group: 'it.unimi.dsi', name: 'fastutil', version: '8.5.6'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'
}

jar {
    manifest {
        attributes "FMLModType": "LIBRARY"
    }
}

mainClassName = 'malte0811.modelsplitter.Main' 

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
}

apply plugin: 'maven-publish'

publishing {
    repositories {
        maven {
            url = "file://" + (System.getenv("local_maven") != null ? System.getenv("local_maven") : System.getenv("bamboo_local_maven"))
        }
    }
    publications {
        maven(MavenPublication) {
            groupId = project.group
            version = project.version
            artifactId = project.archivesBaseName

            artifact jar
            artifact sourcesJar

            pom {
                name = project.archivesBaseName
                description = project.archivesBaseName
                url = ''
                scm {
                    url = 'https://github.com/malte0811/BlockModelSplitter'
                    connection = 'scm:git:git@github.com/malte0811/BlockModelSplitter.git'
                    developerConnection = 'scm:git:git@github.com/malte0811/BlockModelSplitter.git'
                }
                issueManagement {
                    system = 'github'
                    url = 'https://github.com/malte0811/BlockModelSplitter/issues'
                }

                developers {
                    developer {
                        id = 'malte0811'
                        name = 'malte0811'
                    }
                }
            }
            /*
            pom.whenConfigured {
                p -> p.dependencies = []
            }*/
        }
    }
}

publish.dependsOn build
